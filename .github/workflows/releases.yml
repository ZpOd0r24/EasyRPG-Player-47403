name: Releases

on:
  push:
    tags:
    - '*'

permissions:
  contents: write

jobs:
  server:
    name: ${{ matrix.image }}
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.image }}

    strategy:
      fail-fast: false
      matrix:
        image:
          - debian:12-slim
          - ubuntu:22.04

    env:
      FILENAME: "Linux-Server-Build-${{ matrix.image }}-${{ github.ref_name }}"

    steps:
      - name: Install dependencies
        run: |
          export DEBIAN_FRONTEND="noninteractive"
          apt-get update
          apt-get install -yqq --no-install-recommends --no-install-suggests \
            ca-certificates build-essential cmake ninja-build git p7zip-full \
            libicu-dev libexpat1-dev libfmt-dev

      - name: Clone Repository
        uses: actions/checkout@v2
        if: github.event.inputs.git-ref == ''

      - name: Compile
        run: |
          VER="(GA, `date +%Y-%m-%d`)"
          cmake -G Ninja -B build . \
            -DBUILD_CLIENT=off -DBUILD_SERVER=on \
            -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=usr \
            -DPLAYER_BUILD_LIBS=on -DPLAYER_VERSION_APPEND="$VER"
          cmake --build build

      - name: Install
        run: |
          # cmake < 3.16 does not support '--install'
          cmake --build build --target install

      - name: Create Archive
        run: |
          7z a -mx9 ${{ env.FILENAME }}.zip usr

      - name: Create Github Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "${{ env.FILENAME }}.zip"
          replacesArtifacts: false
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}

  windows:
    name: windows
    runs-on: windows-latest

    env:
      FILENAME: "Windows-Build-${{ github.ref_name }}"
      TOOLCHAIN: "vcpkg-export-20230429-132534"

    steps:
      - name: Setup Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@release/v1

      - name: Clone Repository
        uses: actions/checkout@v2
        if: github.event.inputs.git-ref == ''

      - name: Setup Toolchain
        shell: bash
        run: |
          aria2c -o tmp.zip \
            "https://github.com/monokotech/EasyRPG-buildscripts/releases/download/20230920/$TOOLCHAIN.zip"
          7z x tmp.zip && mv -v ${{ env.TOOLCHAIN }} vcpkg

      - name: Compile
        shell: cmd
        run: |
          cmake . -A x64 -B build ^
            -DVCPKG_TARGET_TRIPLET=x64-windows-static ^
            -DCMAKE_TOOLCHAIN_FILE=.\vcpkg\scripts\buildsystems\vcpkg.cmake ^
            -DCMAKE_BUILD_TYPE=RelWithDebInfo ^
            -DPLAYER_BUILD_LIBS=on
          # https://stackoverflow.com/questions/19024259/how-to-change-the-build-type-to-release-mode-in-cmake/20423820#20423820
          cmake --build build --config RelWithDebInfo

      - name: Create Archive
        shell: bash
        run: |
          7z a -mx9 ${{ env.FILENAME }}.zip build/RelWithDebInfo

      - name: Create Github Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "${{ env.FILENAME }}.zip"
          replacesArtifacts: false
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}

  android:
    name: android-${{ matrix.abi }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        abi:
          - armeabi-v7a
          - arm64-v8a

    env:
      FILENAME: "Android-Build-${{ matrix.abi }}-${{ github.ref_name }}"

    steps:
      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'oracle'
          java-version: '17'

      - name: Clone Repository
        uses: actions/checkout@v2
        if: github.event.inputs.git-ref == ''

      - name: Setup Toolchain
        run: |
          aria2c -o tmp.tar.gz \
            "https://github.com/monokotech/EasyRPG-buildscripts/releases/download/20230920/android_toolchain.tar.gz"
          mkdir -p toolchain && tar xf tmp.tar.gz -C toolchain

      - name: Decode Base64 Keystore
        uses: timheuer/base64-to-file@v1.2
        with:
          fileName: 'keystore'
          fileDir: './'
          encodedString: ${{ secrets.APK_STORE_FILE_B64 }}

      - name: Compile
        env:
          ORG_GRADLE_PROJECT_RELEASE_STORE_FILE: ${{ github.workspace }}/keystore
          ORG_GRADLE_PROJECT_RELEASE_STORE_PASSWORD: ${{ secrets.APK_KEY_PASSWORD }}
          ORG_GRADLE_PROJECT_RELEASE_KEY_ALIAS: ${{ secrets.APK_KEY_ALIAS }}
          ORG_GRADLE_PROJECT_RELEASE_KEY_PASSWORD: ${{ secrets.APK_KEY_PASSWORD }}
          ORG_GRADLE_PROJECT_ABI_FILTERS_RELEASE: ${{ matrix.abi }}
        run: |
          cd builds/android
          ./gradlew -PtoolchainDirs="${{ github.workspace }}/toolchain" \
            -PcmakeOptions="-DPLAYER_BUILD_LIBS=on -DCMAKE_BUILD_TYPE=Release" \
            assembleRelease
          cp -v app/build/outputs/apk/release/app-release.apk \
            ${{ github.workspace }}/${{ env.FILENAME }}.apk

      - name: Create Github Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "${{ env.FILENAME }}.apk"
          replacesArtifacts: false
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}

  macos:
    name: macos-${{ matrix.arch }}
    runs-on: macos-latest

    strategy:
      matrix:
        arch:
          - x86_64
          - arm64

    env:
      FILENAME: "MacOS-Build-${{ matrix.arch }}-${{ github.ref_name }}"

    steps:
      - name: Clone Repository
        uses: actions/checkout@v2
        if: github.event.inputs.git-ref == ''

      - name: Setup Toolchain
        run: |
          aria2c -o tmp.tar.gz \
            "https://github.com/monokotech/EasyRPG-buildscripts/releases/download/20230920/macos_toolchain.tar.gz"
          mkdir -p toolchain && tar xf tmp.tar.gz -C toolchain
          # fix: Imported target ... includes non-existent path
          # grep: -I is to exclude binary files
          oldpath="/Users/runner/work/EasyRPG-buildscripts/EasyRPG-buildscripts/macos/x86_64"; \
            grep toolchain -I -l -r -e "$oldpath" | \
            xargs -I{} sed -i '' "s|$oldpath|${{ github.workspace }}/toolchain/universal|g" "{}"

      # CMAKE_FIND_PACKAGE_PREFER_CONFIG=off
      #  force to use module (builds/cmake/Modules/Find*.cmake) instead of config
      - name: Compile
        run: |
          VER="(GithubActions, `date +%Y-%m-%d`)"
          cmake . -B build \
          -DCMAKE_FIND_PACKAGE_PREFER_CONFIG=off \
          -DCMAKE_PREFIX_PATH="${{ github.workspace }}/toolchain/universal" \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.12 \
          -DCMAKE_OSX_ARCHITECTURES="${{ matrix.arch }}" \
          -DCMAKE_BUILD_TYPE=RelWithDebInfo \
          -DPLAYER_BUILD_LIBS=on \
          -DPLAYER_VERSION_APPEND="$VER"
          cmake --build build

      - name: Create Archive
        run: |
          7z a -mx9 ${{ env.FILENAME }}.zip "build/EasyRPG Player.app"

      - name: Create Github Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "${{ env.FILENAME }}.zip"
          replacesArtifacts: false
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
